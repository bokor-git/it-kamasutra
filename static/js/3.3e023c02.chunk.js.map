{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Dialog/DialogItem.jsx","components/Dialogs/Massage/MassageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","Dialog","name","path","id","className","s","dialog","active","to","DialogItem","dialogElement","dialogsData","map","dialogs","dialogItems","Message","text","massages","MassageItem","massageElement","massageData","massage","maxLength100","maxLengthCreator","MessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","onSendMassageButtonClick","data","newMassageBody","DialogsContainerAPI","this","props","React","Component","compose","connect","state","dialogPage","dispatch","sendMassageCreator","withAuthRedirect"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oBCAjND,EAAOC,QAAU,CAAC,QAAU,wBAAwB,YAAc,4BAA4B,OAAS,uBAAuB,OAAS,uBAAuB,SAAW,yBAAyB,QAAU,0B,iJCGtMC,EAAS,SAAC,GAAgB,IAAfC,EAAc,EAAdA,KACTC,EAAO,YADgB,EAARC,GAEnB,OAAQ,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACvC,kBAAC,IAAD,CAASC,GAAIN,GAAb,IAAqBD,EAArB,OAgBOQ,EAZI,SAAC,GAAmB,IAC/BC,EAD8B,EAAjBC,YACeC,KAC5B,SAAAN,GAAM,OAAI,kBAAC,EAAD,CAAQL,KAAMK,EAAOL,KAAME,GAAIG,EAAOH,QAEpD,OAEI,yBAAKC,UAAWC,IAAEQ,SACd,yBAAKT,UAAWC,IAAES,aACbJ,KCdXK,EAAU,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACd,OACI,yBAAKZ,UAAWC,IAAEY,UACbD,IAaEE,EARK,SAAC,GAAmB,IAChCC,EAD+B,EAAjBC,YACeR,KAC7B,SAAAS,GAAO,OAAI,kBAAC,EAAD,CAASL,KAAMK,EAAQL,KAAMb,GAAIkB,EAAQlB,QACxD,OAAQ,yBAAKC,UAAWC,IAAEY,UACjBE,I,iCCTPG,EAAcC,YAAiB,KAY/BC,EAAmBC,YAAU,CAC/BC,KAAM,WADeD,EAVN,SAAC,GAAkB,IAAjBE,EAAgB,EAAhBA,aACjB,OAAO,0BAAMC,SAAUD,GACnB,kBAACE,EAAA,EAAD,CAAOC,UAAWC,IACL9B,KAAM,iBACN+B,YAAa,eACnBC,SAAU,CAACC,IAAUZ,KAC5B,qDAsBOa,EAZC,SAAC,GAA0D,IAAzDxB,EAAwD,EAAxDA,YAAYS,EAA4C,EAA5CA,YAAcgB,EAA8B,EAA9BA,yBAKxC,OACI,yBAAKhC,UAAWC,IAAEQ,SACd,6BAAK,kBAAC,EAAD,CAAYF,YAAaA,KAC9B,6BAAK,kBAAC,EAAD,CAAaS,YAAaA,KAChC,kBAACI,EAAD,CAAkBI,SAPX,SAACS,GACXD,EAAyBC,EAAKC,qB,uBCrBhCC,E,uKAEE,OAAO,kBAAC,EAAYC,KAAKC,W,GAFCC,IAAMC,WAuBzBC,sBACXC,aAlBkB,SAACC,GACnB,MAAO,CACHnC,YAAamC,EAAMC,WAAWpC,YAC9BS,YAAa0B,EAAMC,WAAW3B,gBAMb,SAAC4B,GACtB,MAAO,CACHZ,yBAA0B,SAACf,GACvB2B,EAASC,YAAmB5B,SAOpC6B,IAFWN,CAIdL","file":"static/js/3.3e023c02.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__L7l8m\",\"dialogItems\":\"Dialogs_dialogItems__L01GC\",\"dialog\":\"Dialogs_dialog__24Z9w\",\"active\":\"Dialogs_active__2YnkR\",\"massages\":\"Dialogs_massages__1QIuS\",\"message\":\"Dialogs_message__3F59Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__2mqfT\",\"dialogItems\":\"Dialog_dialogItems__11MLV\",\"dialog\":\"Dialog_dialog__3OQe8\",\"active\":\"Dialog_active__14YmC\",\"massages\":\"Dialog_massages__2FvjH\",\"message\":\"Dialog_message__2be11\"};","import React from 'react';\r\nimport s from \"./Dialog.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Dialog = ({name, id}) => {\r\n    let path = \"/dialogs/\" + id;\r\n    return (<div className={s.dialog + \" \" + s.active}>\r\n        <NavLink to={path}> {name} </NavLink>\r\n    </div>)\r\n};\r\n\r\nconst DialogItem = ({dialogsData}) => {\r\n    let dialogElement = dialogsData.map(\r\n        dialog => <Dialog name={dialog.name} id={dialog.id}/>\r\n    );\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogElement}\r\n            </div>\r\n        </div>)\r\n}\r\nexport default DialogItem;","import React from 'react';\r\n\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\n\r\nconst Message = ({text}) => {\r\n    return (\r\n        <div className={s.massages}>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MassageItem = ({massageData}) => {\r\n    let massageElement = massageData.map(\r\n        massage => <Message text={massage.text} id={massage.id}/>)\r\n    return (<div className={s.massages}>\r\n            {massageElement}\r\n        </div>\r\n    )\r\n}\r\nexport default MassageItem;","import React from 'react';\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./Dialog/DialogItem\";\r\nimport MassageItem from \"./Massage/MassageItem\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utilits/validators/validators\";\r\n\r\nconst maxLength100 =maxLengthCreator(100);\r\n\r\nconst MessageForm =({handleSubmit})=>{\r\n    return <form onSubmit={handleSubmit}>\r\n        <Field component={Textarea}\r\n                     name={\"newMassageBody\"}\r\n                     placeholder={\"Your massage\"}\r\n               validate={[required, maxLength100]}/>\r\n        <button> Send massage</button>\r\n    </form>\r\n};\r\n\r\nconst MessageFormRedux = reduxForm({\r\n    form: 'massage'\r\n})(MessageForm);\r\n\r\n\r\n\r\nconst Dialogs = ({dialogsData,massageData , onSendMassageButtonClick}) => {\r\n\r\n    let onSubmit= (data)=>{\r\n        onSendMassageButtonClick(data.newMassageBody);\r\n    };\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div><DialogItem dialogsData={dialogsData}/></div>\r\n            <div><MassageItem massageData={massageData}/></div>\r\n           <MessageFormRedux onSubmit={onSubmit}/>\r\n        </div>)\r\n}\r\nexport default Dialogs;\r\n\r\n","import {sendMassageCreator} from \"../../Redux/dialog-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport React from \"react\";\r\nimport withAuthRedirect from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass DialogsContainerAPI extends React.Component {\r\n    render() {\r\n        return <Dialogs {...this.props}/>\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsData: state.dialogPage.dialogsData,\r\n        massageData: state.dialogPage.massageData,\r\n\r\n    }\r\n\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSendMassageButtonClick: (massage) => {\r\n            dispatch(sendMassageCreator(massage))\r\n        }\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)\r\n(DialogsContainerAPI)\r\n\r\n"],"sourceRoot":""}